// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: fileprocr.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProcrClient is the client API for Procr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcrClient interface {
	Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error)
}

type procrClient struct {
	cc grpc.ClientConnInterface
}

func NewProcrClient(cc grpc.ClientConnInterface) ProcrClient {
	return &procrClient{cc}
}

func (c *procrClient) Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error) {
	out := new(UploadResponse)
	err := c.cc.Invoke(ctx, "/bilginyuksel.fileprocr.Procr/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProcrServer is the server API for Procr service.
// All implementations must embed UnimplementedProcrServer
// for forward compatibility
type ProcrServer interface {
	Upload(context.Context, *UploadRequest) (*UploadResponse, error)
	mustEmbedUnimplementedProcrServer()
}

// UnimplementedProcrServer must be embedded to have forward compatible implementations.
type UnimplementedProcrServer struct {
}

func (UnimplementedProcrServer) Upload(context.Context, *UploadRequest) (*UploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedProcrServer) mustEmbedUnimplementedProcrServer() {}

// UnsafeProcrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcrServer will
// result in compilation errors.
type UnsafeProcrServer interface {
	mustEmbedUnimplementedProcrServer()
}

func RegisterProcrServer(s grpc.ServiceRegistrar, srv ProcrServer) {
	s.RegisterService(&Procr_ServiceDesc, srv)
}

func _Procr_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcrServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilginyuksel.fileprocr.Procr/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcrServer).Upload(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Procr_ServiceDesc is the grpc.ServiceDesc for Procr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Procr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bilginyuksel.fileprocr.Procr",
	HandlerType: (*ProcrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upload",
			Handler:    _Procr_Upload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fileprocr.proto",
}
